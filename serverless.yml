# service: fb-backend

# plugins:
#   - serverless-plugin-typescript
#   - serverless-offline
#   - serverless-dynamodb-local

# provider:
#   name: aws
#   runtime: nodejs18.x
#   stage: ${opt:stage, 'dev'}
#   region: ${opt:region, 'us-east-1'}
#   # memorySize: 256
#   environment:
#     SERVICE: ${self:service}
#     STAGE: ${self:provider.stage}
#     REGION: ${self:provider.region}

#   apiGateway:
#     shouldStartNameWithService: true
#   iam:
#     role:
#       statements:
#         - Effect: Allow
#           Action:
#             - dynamodb:DescribeTable
#             - dynamodb:Query
#             - dynamodb:Scan
#             - dynamodb:GetItem
#             - dynamodb:PutItem
#             - dynamodb:UpdateItem
#             - dynamodb:DeleteItem
#           Resource: arn:aws:dynamodb:${self:provider.region}:*:*

# functions:
#   api:
#     handler: src/lambda.handler
#     events:
#       - http:
#           path: /
#           method: ANY
#           cors: true
#       - http:
#           path: /{proxy+}
#           method: ANY
#           cors: true
# custom:
#   serverless-offline:
#     # httpsProtocol: "dev-certs"
#     httpPort: 3750
#     noPrependStageInUrl: true
#   dynamodb:
#     start:
#       port: 8000
#       inMemory: true
#       migrate: true
# # resources:
# #   Resources:
# #     UsersTable:
# #       Type: AWS::DynamoDB::Table
# #       Properties:
# #         TableName: Users
# #         AttributeDefinitions:
# #           - AttributeName: id
# #             AttributeType: S
# #         KeySchema:
# #           - AttributeName: id
# #             KeyType: HASH
# #         ProvisionedThroughput:
# #           ReadCapacityUnits: 1
# #           WriteCapacityUnits: 1
# # ```


# resources:
#   - ${file(resource/dynamodb.yml)}


service: fb-backend

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  # memorySize: 256
  environment:
    SERVICE: ${self:service}
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    NODE_ENV: ${self:provider.stage}


  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - rds-db:connect
          Resource: "*"

functions:
  api:
    handler: src/lambda.handler
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
custom:
  serverless-offline:
    # httpsProtocol: "dev-certs"
    httpPort: 3750
    noPrependStageInUrl: true
  # rds:
  #   start:
  #     port: 3306
  #     dbPath: ./data/mysql
  #     migrate: true
